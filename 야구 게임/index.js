// 이것은 간단한 숫자 맞추기 게임입니다. 이 게임은 다음과 같은 방식으로 작동합니다.

// 컴퓨터가 1에서 9까지의 중복되지 않는 임의의 숫자 3개를 선택합니다.
// 플레이어는 10회 시도를 통해 컴퓨터가 선택한 3개의 숫자를 맞춥니다.
// 각 시도마다 플레이어는 3개의 숫자를 입력하고, 컴퓨터는 그것에 대한 힌트를 제공합니다.
// 힌트는 스트라이크, 볼 또는 아웃으로 표시됩니다. 
// 스트라이크는 플레이어가 입력한 숫자 중 하나가 컴퓨터가 선택한 숫자와 숫자와 위치가 모두 일치할 때 표시됩니다.
//  볼은 플레이어가 입력한 숫자 중 하나가 컴퓨터가 선택한 숫자와 숫자만 일치하고 위치는 다를 때 표시됩니다.
//   아웃은 플레이어가 입력한 숫자 중 컴퓨터가 선택한 어떤 숫자와도 일치하지 않을 때 표시됩니다.
// 플레이어가 3개의 숫자를 모두 맞추면 게임에서 승리합니다.
// 플레이어가 10번의 시도 내에 3개의 숫자를 맞추지 못하면 게임에서 패배합니다.
// 이 게임은 재미있고 교육적인 면이 있습니다. 숫자 맞추기 게임은 문제 해결 능력을 향상시키고 숫자 인식 능력을 개발하는 데 도움이 됩니다.


//----------------------------------

// 1.빈 숫자 배열을 선택
// 2.for 루프를 사용하여 1부터 9까지의 숫자를 숫자 numbers 배열에 추가
// 3.빈 결과 배열을 생성
// 4. for루프를 사용하여 3번 반복
// 5. math.random함수를 사용하여 0이상 1미만의 무작위 숫자를 생성
// 6.numbers 배열의 길이9와 위에서 생성한 무작위 숫자를 곱하여
//   0이상 8이하의 무작위 정수를 생성
// 7.result 배열에 numbers 배열에서 생성한 무작위 인덱스에 해당하는 값을 추가
// 8.numbers.splice(randomindex,1)코드를 사용하여
//   numbers 배열에서 위에서 선택한 숫자를 제거한다.
//   이렇게 함으로써 중복되지 않는 임의의 숫자 3개를 선택 가능하다.
// 9. 콘솔.log결과 코드를 사용하여 선택된 3개의 숫자를 출력해준다.

let numbers = [];// 1~9
for (let i = 1; i <= 9; i++) {
  numbers.push(i);
}
let result = []; // ->이 배열에는 뒤에서 선택된 3개의 숫자가 들어갈것이다.

for (let i = 0; i < 3; i++) {
  let randomIndex = Math.floor(Math.random() * numbers.length);//0~8
  result.push(numbers[randomIndex]);
  //result 배열의 무작위 인덱스에 해당하는 값을 추가하는 코드
  numbers.splice(randomIndex, 1);
}

console.log(result); // 선택된 3개의 숫자 출력



//----------------------------------



// let result = []; 
// let index = result.indexOf(guessArray[i]);
// 1부터 9까지의 숫자 배열을 만들고 그 중 3개를  선택하여 결과 배열에 저장한다.



let tries = 10; // 플레이어가 시도할 수 있는 횟수
while (tries > 0) {
  let guess = prompt("숫자 3개를 입력하세요 (1~9): ");
  let guessArray = guess.split("").map(Number); // 문자열로 입력된 guess를 배열로 변환하여 guessArray에 저장
  let strike = 0;
  let ball = 0;

  // 플레이어가 입력한 숫자와 컴퓨터가 선택한 숫자를 비교하여 strike와 ball을 계산
  for (let i = 0; i < result.length; i++) {
    let index = result.indexOf(guessArray[i]);

    if (index == -1)
    {
      
    } else if(index == i){
      strike++;
    }else{
      ball++;
    }

    // if (index === i) {
      
    // } else if (index !== -1) {
      
    // }
  }

  if (strike === 3) {
    alert("축하합니다! 승리하셨습니다!");
    break;
  } else {
    alert(`strike: ${strike}, ball: ${ball}`);
    tries--;
    if (tries === 0) {
      alert("10번의 기회를 모두 사용하셨습니다. 게임 오버!");
    } else {
      alert(`남은 횟수: ${tries}회`);
    }
  }
}

// 플레이어가 입력한 값은 prompt 함수를 통해 문자열 string형태로 받아오게 됨
// 따라서 받아온 문자열을 숫자 배열로 변환하기 위해서는 문자열을 배열로 변환후
// 각 원소를 숫자로 바꿔주어야 한다.
// 이때 split 함수를 사용하여 문자열을 배열로 분리하고 map 함수를 사용하여
// 각 원소를 숫자로 변환한다.

// 예를 들어, 'guess 값이 "123"이라면 '분할split 함수를 사용하여 
// ["1", "2", "3"] 형태의 배열로 변환하고, 'mapmap 함수를 사용하여
//  guessArray 배열을 '[1, 2, 3][1, 2, 3] 형태의 숫자 배열로 만들게 됩니다.




//---------------------------------- 총정리
// 위 코드는 숫자 야구 게임을 구현하는 자바스크립트 코드입니다. 코드를 하나씩 살펴보며 해석해보겠습니다.

// '시도 = 10; : 플레이어가 시도할 수 있는 횟수를 10으로 초기화합니다.
// '동안 (> 0 시도) {tries가 0보다 클 때까지 반복합니다.
// 'let guess = prompt("숫자 3개를 입력하세요 (1~9): ");prompt() 함수를 사용하여 플레이어에게 숫자 3개를 입력받습니다.
// 'let guessArray = guess.split("").map(Number);split() 메소드를 사용하여 'guessguess 문자열을 1글자씩 분리하고, 'mapmap() 메소드를 사용하여 분리된 문자열을 숫자형으로 변환한 배열을 만듭니다.
// '스트라이크 = 0; : 스트라이크 개수를 0으로 초기화합니다.
// '공을 보자 = 0; : 볼 개수를 0으로 초기화합니다.
// 'for (let i = 0; i < 3; i++) {
// 'let index = result.indexOf(guessArray[i]);indexOf() 메소드를 사용하여 result 배열에서 'guessArray[iguessArray[i]가 위치한 인덱스를 찾습니다.
// 'if (인덱스 === i) { 스트라이크 ++;index와 i가 같으면 스트라이크 개수를 증가시킵니다.
// 'else if (인덱스 !== -1) { ball++; }가 -1이 아니면 볼 개수를 증가시킵니다.
// 'if (스트라이크 === 3) { console.log("축하합니다! 승리하셨습니다!"); 휴식; }3이면 플레이어가 이긴 것이므로 축하 메시지를 출력하고, 반복문을 종료합니다.
// 'else { 콘솔.log스트라이크: ${스트라이크}, 볼: ${볼}); : 스트라이크와 볼 개수를 출력합니다.
// '시도--; : 시도 횟수를 1 감소시킵니다.
// 'if (시도 === 0) { console.log("10번의 기회를 모두 사용하셨습니다. 게임 오버!"); } : 시도 횟수가 0이면 모든 기회를 소진했으므로 게임 오버 메시지를 출력합니다.
// else { console.log(남은 횟수: ${tries}회'); }); } } : 시도 횟수가 0이 아니면 남은 시도 횟수를 출력합니다.
// 이렇게 코드를 실행하면, 숫자 야구 게임이


